// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    bio           String?
    followers     User[] @relation(name: "Followers")
    follows     User[] @relation(name: "Followers")
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    workoutDates  WorkoutDate[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model WorkoutDate {
    id        String   @id @default(cuid())
    userId    String
    date      DateTime
    exercises Exercise[]
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Exercise {
    id            String   @id @default(cuid())
    workoutDateId String
    name          String
    sets          Json    @db.Json
    workoutDate   WorkoutDate @relation(fields: [workoutDateId], references: [id], onDelete: Cascade)
}
